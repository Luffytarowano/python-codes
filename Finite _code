import matplotlib.pyplot as plt

# --- Schr√∂dinger Equation Solver Functions ---

def Psi(mhdx2, psi, Vi, E):
    N = len(psi)
    psiE = [psi[i] for i in range(N)]
    for i in range(2, N):
        psiE[i] = 2 * (mhdx2 * (Vi[i] - E) + 1) * psiE[i-1] - psiE[i-2]
    return psiE

def cntDiffSchr(mhdx2, Vi, psi0, psi1, psiN, nodes, maxIter):
    N = len(Vi) - 1
    Emn, Emx = min(Vi), max(Vi)
    psi_temp = [0] * (N + 1)
    psi_temp[0], psi_temp[1], psi_temp[N] = psi0, psi1, psiN

    for _ in range(maxIter):
        E = 0.5 * (Emn + Emx)
        psi = Psi(mhdx2, psi_temp, Vi, E)

        # Count sign changes = number of nodes
        cnt = sum(1 for i in range(1, N-2) if psi[i] * psi[i+1] < 0)

        if cnt > nodes:
            Emx = E
        elif cnt < nodes:
            Emn = E
        else:
            if psi[N-1] > psiN:
                Emn = E
            else:
                Emx = E

        if abs(Emx - Emn) < 1e-6:
            return E, psi

    return None, None

def simp13Xdis(h, fx):
    n = len(fx)
    if n % 2 == 0: n -= 1  # make it odd
    I = fx[0] + fx[n-1]
    for i in range(1, n-1):
        I += 4 * fx[i] if i % 2 else 2 * fx[i]
    return I * h / 3

def psiNorm(psi, dx):
    norm = simp13Xdis(dx, [p**2 for p in psi])
    return [p / (norm**0.5) for p in psi]

def V(pr, x):
    L0, L1, V0 = pr
    return V0 if L0 < x < L1 else 0

# --- Main Parameters ---
hbar, m = 0.1, 1
x0, xN = -1.4, 1.4
dx = 0.01
maxIter = 100
psi0, psiN = 0, 0
L0, L1, V0 = -1, 1, -1
prV = [L0, L1, V0]
mhdx2 = m * dx**2 / hbar**2
N = int((xN - x0) / dx)
dx = (xN - x0) / N
x = [x0 + i*dx for i in range(N + 1)]
Vi = [V(prV, xi) for xi in x]

# --- Plotting Wavefunctions ---
styles = ['b-', 'g--', 'r-.', 'm:']
plt.figure(figsize=(10, 6))

for nodes in range(4):  # First four states
    psi1 = (-1)**nodes * 1e-4
    E, psi = cntDiffSchr(mhdx2, Vi, psi0, psi1, psiN, nodes, maxIter)
    if E is not None:
        psi = psiNorm(psi, dx)
        plt.plot(x, psi, styles[nodes], label=f'$E_{nodes}$ = {E:.4f}')

# --- Plotting Potential ---
Vmax = max(abs(v) for v in Vi)
Vi_scaled = [v / Vmax for v in Vi]
plt.plot(x, Vi_scaled, 'k-', label='Potential (scaled)', linewidth=1.5)

# --- Plot Settings ---
plt.xlabel('x')
plt.ylabel(r'$\psi(x)$')
plt.title('Eigenstates in 1D Finite Well (Node Counting Method)')
plt.legend(loc='best', fontsize=10)
plt.grid(True)
plt.tight_layout()
plt.show()
